"use strict";function setItemLocalStorage(e,t){localStorage.setItem(`${t}`,JSON.stringify(e))}function getItemLocalStorage(e){return JSON.parse(localStorage.getItem(e))}const lang={en:{days:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],searchPlaceholder:["Search city"],currentWeather:["Temperature","Real Feel"],information:{title:["Information"],item:["High / Low","Wind","Humidity","Pressure","Visibility","Sunrise","Sunset"],unit:["","m/s","%","hPa","m"]},userCities:["World forecast","Add the cities you interested in"],overview:{title:["Overview"]}},uk:{days:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Січня","Лютого","Березня","Квітня","Травня","Червня","Липня","Серпня","Вересня","Жовтня","Листопада","Грудня"],searchPlaceholder:["Пошук міста"],currentWeather:["Температура","Відчувається"],information:{title:["Інформація"],item:["Вища / Нижна","Вітер","Вологість","Тиск","Видимість","Схід сонця","Захід сонця"],unit:["","м/с","%","гПа","м"]},userCities:["Світовий прогноз","Додайте міста, які вас цікавлять"],overview:{title:["Огляд"]}}},changeLanguageButton=document.querySelector(".change-language__button"),changeLanguageList=document.querySelector(".change-language__list"),changeLanguageListButtons=document.querySelectorAll(".change-language__list-button");function changePageLanguage(){const e=getItemLocalStorage("currentLanguage");document.querySelector(".search-city-input").placeholder=lang[e].searchPlaceholder[0],document.querySelector(".current-weather__temp-text").textContent=lang[e].currentWeather[0],document.querySelector(".current-weather__realfeel-temp-text").textContent=lang[e].currentWeather[1],document.querySelector(".weather-info__title").textContent=lang[e].information.title[0],document.querySelector(".weather-info__sunrise-text").textContent=lang[e].information.item[5],document.querySelector(".weather-info__sunset-text").textContent=lang[e].information.item[6],document.querySelector(".user-cities__add-item .user-cities__title").textContent=lang[e].userCities[0],document.querySelector(".user-cities__add-item .user-cities__description").textContent=lang[e].userCities[1],document.querySelectorAll(".weather-info__item").forEach(((t,a)=>{const n=t.querySelector(".weather-info__item-text"),r=t.querySelector(".weather-info__item-units");n.textContent=lang[e].information.item[a],r&&(r.textContent=lang[e].information.unit[a])})),document.querySelector(".chart__title").textContent=lang[e].overview.title[0]}function changeCurrentDate(){document.querySelector(".header__current-date").textContent=getCurrentDate()}function getCurrentDate(){const e=getItemLocalStorage("currentLanguage"),t=new Date;return`${lang[e].days[t.getDay()]}, ${t.getDate().toString().padStart(2,"0")} ${lang[e].months[t.getMonth()]} ${t.getFullYear()}`}changeLanguageButton.addEventListener("click",(e=>{e.stopPropagation(),changeLanguageList.classList.toggle("change-language__list--active")})),document.addEventListener("click",(()=>{changeLanguageList.classList.remove("change-language__list--active")})),changeLanguageListButtons.forEach((e=>{getItemLocalStorage("currentLanguage")||changeLanguageButton.querySelector(".change-language__button-text").textContent!==e.textContent||setItemLocalStorage(e.dataset.language,"currentLanguage"),getItemLocalStorage("currentLanguage")&&e.dataset.language===getItemLocalStorage("currentLanguage")&&(changeLanguageButton.querySelector(".change-language__button-text").textContent=e.textContent,changeLanguageButton.dataset.currentLanguage=e.dataset.language),e.addEventListener("click",(async()=>{if(changeLanguageButton.querySelector(".change-language__button-text").textContent=e.textContent,e.dataset.language===changeLanguageButton.dataset.currentLanguage)return;changeLanguageButton.dataset.currentLanguage=e.dataset.language,setItemLocalStorage(changeLanguageButton.dataset.currentLanguage,"currentLanguage"),changeCurrentDate();const{type:t,cityId:a,category:n}=getItemLocalStorage("locationAddress"),{cityCoordinates:r,cityName:i,provinceName:o,countryName:c}=await getCityData(t,a,n);setItemLocalStorage({type:t,cityId:a,category:n,cityCoordinates:r,cityName:i,provinceName:o,countryName:c},"locationAddress"),changePageLocationName(i,o,c);const s=document.querySelector(".user-cities__list");s.innerHTML='\n            <li class="user-cities__item user-cities__add-item">\n                <button type="button" class="user-cities__icon user-cities__add-icon">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256">\n                        <g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">\n                            <path\n                                d="M 86.5 41.5 h -38 v -38 C 48.5 1.567 46.933 0 45 0 c -1.933 0 -3.5 1.567 -3.5 3.5 v 38 h -38 C 1.567 41.5 0 43.067 0 45 s 1.567 3.5 3.5 3.5 h 38 v 38 c 0 1.933 1.567 3.5 3.5 3.5 c 1.933 0 3.5 -1.567 3.5 -3.5 v -38 h 38 c 1.933 0 3.5 -1.567 3.5 -3.5 S 88.433 41.5 86.5 41.5 z"\n                                fill="black" stroke="black" stroke-width="3" />\n                        </g>\n                    </svg>\n                </button>\n                <p class="user-cities__title">World forecast</p>\n                <p class="user-cities__description">Add the cities you interested in</p>\n            </li>\n        ',changePageLanguage();const u=getItemLocalStorage("userCities");await Promise.all(u.map((async e=>{const{cityName:t,provinceName:a,countryName:n}=await getCityData(e.type,e.cityId,e.category),r=await getCityDataWeather(e.cityCoordinates,{daily:["apparent_temperature_max","apparent_temperature_min"],temperature_unit:[getItemLocalStorage("tempUnit")],timezone:["auto"],forecast_days:[1]});s.insertAdjacentHTML("beforeend",userCitiesCardRender(r,e.cityId,e.type,e.category,t,a,n)),e.cityName=t,e.provinceName=a,e.countryName=n}))),setItemLocalStorage(u,"userCities");document.querySelectorAll(".user-cities__button-item").forEach((e=>{const t=e.dataset.cityId,a=e.dataset.cityType,n=e.dataset.cityCategory,r=e.querySelector(".user-cities__item-action-remove"),i=e.querySelector(".user-cities__item-action-apply");r.addEventListener("click",(async()=>{console.log("remove:",t)})),i.addEventListener("click",(async()=>{if(t===getItemLocalStorage("locationAddress").cityId)return;const{cityCoordinates:e,cityName:r,provinceName:i,countryName:o}=await getCityData(a,t,n);setItemLocalStorage({type:a,cityId:t,category:n,cityCoordinates:e,cityName:r,provinceName:i,countryName:o},"locationAddress"),await changeWeatherLocation()}))}))}))})),changeCurrentDate();const changeTempUnitButton=document.querySelector(".change-temp-unit__button"),changeTempUnitCelsius=changeTempUnitButton.querySelector(".change-temp-unit__item-celc"),changeTempUnitFahrenheit=changeTempUnitButton.querySelector(".change-temp-unit__item-far");async function changeWeatherLocation(){getItemLocalStorage("locationAddress")||"en"!==getItemLocalStorage("currentLanguage")?getItemLocalStorage("locationAddress")||"uk"!==getItemLocalStorage("currentLanguage")||setItemLocalStorage({type:"R",cityId:"172987",category:"boundary",cityCoordinates:[-2.99168,53.4071991],cityName:"Ліверпуль",provinceName:"Англія",countryName:"Велика Британія"},"locationAddress"):setItemLocalStorage({type:"R",cityId:"172987",category:"boundary",cityCoordinates:[-2.99168,53.4071991],cityName:"Liverpool",provinceName:"England",countryName:"United Kingdom"},"locationAddress");const{cityCoordinates:e,cityName:t,provinceName:a,countryName:n}=getItemLocalStorage("locationAddress");changePageLocationName(t,a,n);const r=await getCityDataWeather(e);console.log("currentCityWeather:",r),renderHourlyCardList(r),itemChangeHeight("current-weather-inner","current-weather"),scrollContent(".current-weather__hours-list",!0),scrollContent(".user-cities__list"),changePageInformation(r)}function changePageLocationName(e,t,a){document.querySelector(".current-weather__location-city").textContent=e,document.querySelector(".current-weather__location-province").textContent=t,document.querySelector(".current-weather__location-country").textContent=a}function changePageInformation({current:e,daily:t}){document.querySelector(".current-weather__temp-number").textContent=`+${Math.round(e.temperature_2m)}°`,document.querySelector(".current-weather__realfeel-temp-number").textContent=`+${Math.round(e.apparent_temperature)}°`,document.querySelector(".weather-info__item-value--high-low .weather-info__item-value").textContent=`${Math.round(t.apparent_temperature_max[0])}° / ${Math.round(t.apparent_temperature_min[0])}°`,document.querySelector(".weather-info__item-value--wind .weather-info__item-value").textContent=e.wind_speed_10m,document.querySelector(".weather-info__item-value--humidity .weather-info__item-value").textContent=e.relative_humidity_2m,document.querySelector(".weather-info__item-value--pressure .weather-info__item-value").textContent=Math.round(e.surface_pressure),document.querySelector(".weather-info__item-value--visibility .weather-info__item-value").textContent=e.visibility,document.querySelector(".weather-info__sunrise-value").textContent=t.sunrise[0].slice(-5),document.querySelector(".weather-info__sunset-value").textContent=t.sunset[0].slice(-5)}function renderHourlyCardItem({temperature_2m:e,time:t},a){return`\n        <li class="current-weather__hours-item">\n            <p class="current-weather__hours-time">${t[a].slice(-5)}</p>\n            <div class="current-weather__hours-icon">\n                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n                    <path d="M5.00352 14.1695C4.78883 14.245 4.58533 14.3444 4.39616 14.4643C3.5541 14.1159 2.76537 13.5975 2.0818 12.9093C-0.693935 10.1429 -0.693935 5.64576 2.0818 2.87938C2.36577 2.59565 2.66393 2.34029 2.98339 2.11331C3.51582 1.73737 4.35351 2.36867 4.29672 2.95741C4.10504 4.98608 4.78655 7.09278 6.34835 8.64621C6.94443 9.24452 7.62087 9.71354 8.34325 10.0537C6.44656 10.3669 5 12.0145 5 14C5 14.0568 5.00118 14.1133 5.00352 14.1695Z" fill="white"></path>\n                    <path d="M10.5332 5.4617L11.06 7.20828C11.0081 7.24998 10.9569 7.2926 10.9065 7.33612L9.37123 6.29434L7.59443 7.5L8.20922 5.4617L6.49998 4.16944L8.65511 4.10949L9.37123 2.11116L10.0874 4.10949L12.2425 4.16944L10.5332 5.4617Z" fill="white"></path>\n                    <path d="M16.6077 4.27602L17.7157 3.44339L16.324 3.41008L15.8578 2.11116L15.3917 3.41008L14 3.44339L15.1079 4.27602L14.7093 5.59493L15.8578 4.81558L17.0063 5.59493L16.6077 4.27602Z" fill="white"></path>\n                    <path d="M7 21H20C22.2091 21 24 19.2091 24 17C24 15.1238 22.7083 13.5494 20.9657 13.1174C20.9884 12.9147 21 12.7087 21 12.5C21 9.46243 18.5376 7 15.5 7C12.9806 7 10.8568 8.69403 10.2056 11.0052C10.1375 11.0017 10.0689 11 10 11C7.79086 11 6 12.7909 6 15C6 15.0568 6.00118 15.1133 6.00352 15.1695C4.83649 15.5803 4 16.6925 4 18C4 19.6569 5.34314 21 7 21Z" fill="white"></path>\n                </svg>\n            </div>\n            <p class="current-weather__hours-temp">${Math.round(e[a])}°</p>\n        </li>\n    `}function renderHourlyCardList({hourly:e}){const t=document.querySelector(".current-weather__hours-list");t.innerHTML="",e.temperature_2m.forEach(((a,n)=>{t.insertAdjacentHTML("beforeend",renderHourlyCardItem(e,n))})),showItem("current-weather__hours-list","current-weather__hours-before"),hideItem("current-weather__hours-list","current-weather__hours-after")}getItemLocalStorage("tempUnit")&&"fahrenheit"===getItemLocalStorage("tempUnit")?changeTempUnitButton.classList.add("change-temp-unit__button--active"):(changeTempUnitButton.classList.remove("change-temp-unit__button--active"),setItemLocalStorage("celsius","tempUnit")),changeTempUnitButton.addEventListener("click",(async()=>{changeTempUnitButton.classList.toggle("change-temp-unit__button--active");const e=changeTempUnitButton.classList.contains("change-temp-unit__button--active")?"fahrenheit":"celsius";changeTempUnitButton.dataset.tempUnit=e,setItemLocalStorage(changeTempUnitButton.dataset.tempUnit,"tempUnit");const{cityCoordinates:t}=getItemLocalStorage("locationAddress"),a=await getCityDataWeather(t);renderHourlyCardList(a),changePageInformation(a),userCitiesRender()})),changeWeatherLocation();const searchCityList=document.querySelector(".search-city__list");let timeoutId;const searchCityInput=document.querySelector(".search-city-input");async function getCitiesDataList(e){const t=await fetch(`https://nominatim.openstreetmap.org/search.php?q=${e}&accept-language=${getItemLocalStorage("currentLanguage")}&format=jsonv2`);return await t.json()}async function getCityData(e,t,a){const n=await fetch(`https://nominatim.openstreetmap.org/details.php?osmtype=${e}&osmid=${t}&class=${a}&addressdetails=1&hierarchy=0&group_hierarchy=1&accept-language=${getItemLocalStorage("currentLanguage")}&format=json`),r=await n.json(),i=r.localname,o=r.address.filter((e=>4===e.admin_level))[0].localname,c=r.address.filter((e=>"country"===e.type))[0].localname;return{cityCoordinates:r.centroid.coordinates,cityName:i,provinceName:o,countryName:c}}async function getCityDataWeather([e,t],a={current:["temperature_2m","relative_humidity_2m","apparent_temperature","weather_code","surface_pressure","wind_speed_10m","visibility"],hourly:["temperature_2m","apparent_temperature","weather_code"],daily:["sunrise","sunset","apparent_temperature_max","apparent_temperature_min"],temperature_unit:[getItemLocalStorage("tempUnit")],wind_speed_unit:["ms"],timezone:["auto"],forecast_days:[1]}){const n=Object.entries(a).reduce(((e,[t,a])=>e+`&${t}=${a.join(",")}`),""),r=await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${t}&longitude=${e}${n}`);return await r.json()}function renderCityItem(e,t,a,n){return`\n        <li \n            class="search-city__item"\n            data-city-id="${e}"\n            data-city-type="${t}"\n            data-city-category="${a}"\n        >\n            <button\n                type="button"\n                class="search-city__button"\n                title="Select current"\n            >\n                ${n}\n            </button>\n            <button\n                type="button"\n                class="search-city__button-add"\n                title="Add to World Forecast"\n            >\n                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 256 256">\n                    <g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">\n                        <path d="M 86.5 41.5 h -38 v -38 C 48.5 1.567 46.933 0 45 0 c -1.933 0 -3.5 1.567 -3.5 3.5 v 38 h -38 C 1.567 41.5 0 43.067 0 45 s 1.567 3.5 3.5 3.5 h 38 v 38 c 0 1.933 1.567 3.5 3.5 3.5 c 1.933 0 3.5 -1.567 3.5 -3.5 v -38 h 38 c 1.933 0 3.5 -1.567 3.5 -3.5 S 88.433 41.5 86.5 41.5 z"\n                        fill="black"\n                        stroke="black"\n                        stroke-width="3"></path>\n                    </g>\n                </svg>\n            </button>\n        </li>\n    `}searchCityInput.addEventListener("input",(async()=>{clearTimeout(timeoutId),timeoutId=setTimeout((async()=>{if(searchCityList.innerHTML="",searchCityInput.value.length<1&&searchCityList.classList.remove("search-city__list--active"),searchCityInput.value.length>0&&searchCityInput.value.length<3&&(searchCityList.classList.add("search-city__list--active"),searchCityList.innerHTML='<li class="search-city__no-result">No result</li>'),searchCityInput.value.length>2){const e=await getCitiesDataList(searchCityInput.value);if(console.log("citiesList:",e,e.length),e.length<1)return searchCityList.classList.add("search-city__list--active"),void(searchCityList.innerHTML='<li class="search-city__no-result">No result</li>');e.forEach((({osm_id:e,osm_type:t,category:a,display_name:n})=>{searchCityList.insertAdjacentHTML("beforeend",renderCityItem(e,t.slice(0,1).toUpperCase(),a,n))})),searchCityList.children.length>0&&searchCityList.classList.add("search-city__list--active");document.querySelectorAll(".search-city__item").forEach((e=>{e.addEventListener("mousedown",(e=>{e.preventDefault()}));const t=e.dataset.cityType,a=e.dataset.cityId,n=e.dataset.cityCategory,r=e.querySelector(".search-city__button"),i=e.querySelector(".search-city__button-add");r.addEventListener("click",(async()=>{const{cityCoordinates:e,cityName:r,provinceName:i,countryName:o}=await getCityData(t,a,n);setItemLocalStorage({type:t,cityId:a,category:n,cityCoordinates:e,cityName:r,provinceName:i,countryName:o},"locationAddress"),console.log("cityData:",e,r,i,o),await changeWeatherLocation(),searchCityInput.blur()})),i.addEventListener("click",(async()=>{const{cityCoordinates:e,cityName:r,provinceName:i,countryName:o}=await getCityData(t,a,n),c={type:t,cityId:a,category:n,cityCoordinates:e,cityName:r,provinceName:i,countryName:o},s=getItemLocalStorage("userCities");for(const e of s)if(c.cityId===e.cityId)return void searchCityInput.blur();s.unshift(c),setItemLocalStorage(s,"userCities"),userCitiesRender(),searchCityInput.blur()}))}))}}),300)}));const clearInputValueButton=document.querySelector(".clear-input-value-button");function showItem(e,t){const a=document.querySelector(`.${e}`),n=document.querySelector(`.${t}`),r=`${t}--active`;a.addEventListener("scroll",(()=>{a.scrollLeft>0?n.classList.add(r):n.classList.remove(r)}))}function hideItem(e,t){const a=document.querySelector(`.${e}`),n=document.querySelector(`.${t}`),r=`${t}--active`;a.clientWidth!==a.scrollWidth?a.addEventListener("scroll",(()=>{Math.ceil(a.scrollLeft)+a.clientWidth>=a.scrollWidth?n.classList.add(r):n.classList.remove(r)})):n.classList.add(r)}function itemChangeHeight(e,t){const a=document.querySelector(`.${t}`),n=document.querySelector(`.${e}`);a.style.height=n.offsetHeight+"px",window.addEventListener("resize",(()=>{a.style.height=n.offsetHeight+"px"}))}async function userCitiesRender(){getItemLocalStorage("userCities")||setItemLocalStorage([],"userCities");const e=document.querySelector(".user-cities__list");e.innerHTML='\n        <li class="user-cities__item user-cities__add-item">\n            <button type="button" class="user-cities__icon user-cities__add-icon">\n                <svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256">\n                    <g transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">\n                        <path\n                            d="M 86.5 41.5 h -38 v -38 C 48.5 1.567 46.933 0 45 0 c -1.933 0 -3.5 1.567 -3.5 3.5 v 38 h -38 C 1.567 41.5 0 43.067 0 45 s 1.567 3.5 3.5 3.5 h 38 v 38 c 0 1.933 1.567 3.5 3.5 3.5 c 1.933 0 3.5 -1.567 3.5 -3.5 v -38 h 38 c 1.933 0 3.5 -1.567 3.5 -3.5 S 88.433 41.5 86.5 41.5 z"\n                            fill="black" stroke="black" stroke-width="3" />\n                    </g>\n                </svg>\n            </button>\n            <p class="user-cities__title">World forecast</p>\n            <p class="user-cities__description">Add the cities you interested in</p>\n        </li>\n    ',changePageLanguage(),await Promise.all(getItemLocalStorage("userCities").map((async({cityCoordinates:t,cityId:a,type:n,category:r,cityName:i,provinceName:o,countryName:c})=>{const s=await getCityDataWeather(t,{daily:["apparent_temperature_max","apparent_temperature_min"],temperature_unit:[getItemLocalStorage("tempUnit")],timezone:["auto"],forecast_days:[1]});e.insertAdjacentHTML("beforeend",userCitiesCardRender(s,a,n,r,i,o,c))}))),itemChangeHeight("user-cities-inner","user-cities"),showItem("user-cities__list","user-cities__before"),hideItem("user-cities__list","user-cities__after"),hidePagination(".user-cities-inner",".user-cities__list");document.querySelectorAll(".user-cities__button-item").forEach((e=>{const t=e.dataset.cityId,a=e.dataset.cityType,n=e.dataset.cityCategory,r=e.querySelector(".user-cities__item-action-remove"),i=e.querySelector(".user-cities__item-action-apply");r.addEventListener("click",(async()=>{const a=getItemLocalStorage("userCities").filter((a=>(t===a.cityId&&e.remove(),t!==a.cityId)));hidePagination(".user-cities-inner",".user-cities__list"),setItemLocalStorage(a,"userCities")})),i.addEventListener("click",(async()=>{if(t===getItemLocalStorage("locationAddress").cityId)return;console.log("click");const{cityCoordinates:e,cityName:r,provinceName:i,countryName:o}=await getCityData(a,t,n);setItemLocalStorage({type:a,cityId:t,category:n,cityCoordinates:e,cityName:r,provinceName:i,countryName:o},"locationAddress"),await changeWeatherLocation(),window.scrollTo({top:0,behavior:"smooth"})}))}))}function userCitiesCardRender(e,t,a,n,r,i,o){return`\n        <li\n            class="user-cities__item user-cities__button-item"\n            data-city-id="${t}"\n            data-city-type="${a}"\n            data-city-category="${n}"\n        >\n            <div class="user-cities__item-content">\n                <div class="user-cities__icon">\n                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none"\n                        xmlns="http://www.w3.org/2000/svg">\n                        <path\n                            d="M5.00352 14.1695C4.78883 14.245 4.58533 14.3444 4.39616 14.4643C3.5541 14.1159 2.76537 13.5975 2.0818 12.9093C-0.693935 10.1429 -0.693935 5.64576 2.0818 2.87938C2.36577 2.59565 2.66393 2.34029 2.98339 2.11331C3.51582 1.73737 4.35351 2.36867 4.29672 2.95741C4.10504 4.98608 4.78655 7.09278 6.34835 8.64621C6.94443 9.24452 7.62087 9.71354 8.34325 10.0537C6.44656 10.3669 5 12.0145 5 14C5 14.0568 5.00118 14.1133 5.00352 14.1695Z"\n                            fill="black" />\n                        <path\n                            d="M10.5332 5.4617L11.06 7.20828C11.0081 7.24998 10.9569 7.2926 10.9065 7.33612L9.37123 6.29434L7.59443 7.5L8.20922 5.4617L6.49998 4.16944L8.65511 4.10949L9.37123 2.11116L10.0874 4.10949L12.2425 4.16944L10.5332 5.4617Z"\n                            fill="black" />\n                        <path\n                            d="M16.6077 4.27602L17.7157 3.44339L16.324 3.41008L15.8578 2.11116L15.3917 3.41008L14 3.44339L15.1079 4.27602L14.7093 5.59493L15.8578 4.81558L17.0063 5.59493L16.6077 4.27602Z"\n                            fill="black" />\n                        <path\n                            d="M7 21H20C22.2091 21 24 19.2091 24 17C24 15.1238 22.7083 13.5494 20.9657 13.1174C20.9884 12.9147 21 12.7087 21 12.5C21 9.46243 18.5376 7 15.5 7C12.9806 7 10.8568 8.69403 10.2056 11.0052C10.1375 11.0017 10.0689 11 10 11C7.79086 11 6 12.7909 6 15C6 15.0568 6.00118 15.1133 6.00352 15.1695C4.83649 15.5803 4 16.6925 4 18C4 19.6569 5.34314 21 7 21Z"\n                            fill="black" />\n                    </svg>\n                </div>\n                <div class="user-cities__location">\n                    <p class="user-cities__city">${r}</p>\n                    <p class="user-cities__country">${o}</p>\n                </div>\n                <div class="user-cities__temp">\n                    <p class="user-cities__temp-high">${Math.round(e.daily.apparent_temperature_max)}°</p>\n                    <span class="user-cities__temp-slash">/</span>\n                    <p class="user-cities__temp-low">${Math.round(e.daily.apparent_temperature_min)}°</p>\n                </div>\n            </div>\n            <div class="user-cities__item-actions">\n                <button type="button" class="user-cities__item-action user-cities__item-action-remove"\n                    title="Remove">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"\n                        fill="none" xmlns:v="https://vecta.io/nano">\n                        <path d="M6 12H18" stroke="#000" stroke-width="2" stroke-linecap="round"\n                            stroke-linejoin="round" />\n                    </svg>\n                </button>\n                <button type="button" class="user-cities__item-action user-cities__item-action-apply"\n                    title="Apply">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"\n                        fill="none" xmlns:v="https://vecta.io/nano">\n                        <path fill-rule="evenodd"\n                            d="M20.61 5.207a1 1 0 0 1 .183 1.402l-10 13a1 1 0 0 1-1.5.097l-5-5a1 1 0 1 1 1.414-1.414l4.195 4.195L19.207 5.39a1 1 0 0 1 1.402-.183z"\n                            fill="#000" />\n                    </svg>\n                </button>\n            </div>\n        </li>\n    `}clearInputValueButton.addEventListener("mousedown",(e=>{e.preventDefault()})),clearInputValueButton.addEventListener("click",(()=>{searchCityInput.value="",searchCityList.classList.remove("search-city__list--active"),clearInputValueButton.classList.remove("clear-input-value-button--active"),searchCityList.innerHTML="",searchCityInput.focus()})),searchCityInput.addEventListener("input",(()=>{""===searchCityInput.value?clearInputValueButton.classList.remove("clear-input-value-button--active"):clearInputValueButton.classList.add("clear-input-value-button--active")})),searchCityInput.addEventListener("focus",(()=>{""===searchCityInput.value?(clearInputValueButton.classList.remove("clear-input-value-button--active"),searchCityList.classList.remove("search-city__list--active")):(clearInputValueButton.classList.add("clear-input-value-button--active"),searchCityList.classList.add("search-city__list--active")),document.addEventListener("keydown",(e=>{"Escape"===e.key&&(e.preventDefault(),clearInputValueButton.classList.remove("clear-input-value-button--active"),searchCityList.classList.remove("search-city__list--active"),searchCityInput.blur())}))})),searchCityInput.addEventListener("blur",(()=>{clearInputValueButton.classList.remove("clear-input-value-button--active"),searchCityList.classList.remove("search-city__list--active")})),userCitiesRender();const userCitiesAddButton=document.querySelector(".user-cities__add-icon");function scrollContent(e,t=!1){const a=document.querySelector(e),n=500;let r=!1,i=0;!0===t&&(new Date).toLocaleTimeString()>="02:00"&&(a.scrollLeft=70*(parseInt((new Date).toLocaleTimeString())-1)),a.parentElement.querySelector(".pagination-button-prev").addEventListener("click",(()=>{r||a.scrollLeft<=0||(i=a.scrollLeft,r=!0,a.scrollBy({left:-500,behavior:"smooth"}))})),a.parentElement.querySelector(".pagination-button-next").addEventListener("click",(()=>{r||Math.round(a.scrollLeft)+a.clientWidth>=a.scrollWidth||(i=a.scrollLeft,r=!0,a.scrollBy({left:n,behavior:"smooth"}))})),a.addEventListener("scroll",(()=>{(Math.round(i)+n===Math.round(a.scrollLeft)||Math.round(a.scrollLeft)+a.clientWidth>=a.scrollWidth)&&(r=!1),(Math.round(i)-n===Math.round(a.scrollLeft)||a.scrollLeft<=0)&&(r=!1)}))}function hidePagination(e,t){const a=document.querySelector(e),n=document.querySelector(t),r=a.querySelectorAll(".pagination-button");n.scrollWidth<=n.offsetWidth?r.forEach((e=>e.classList.add("pagination-button-hide"))):r.forEach((e=>e.classList.remove("pagination-button-hide")))}userCitiesAddButton.addEventListener("click",(()=>{searchCityInput.focus()}));const ctx=document.getElementById("weatherChart").getContext("2d"),mainTextColor=createVarFromCss("--main-text-color"),secondaryTextColor=createVarFromCss("--secondary-text-color"),mainBackgroundColor=createVarFromCss("--main-background-color"),mainBorderRadius=createVarFromCss("--main-border-radius"),secondaryBorderRadius=10*mainBorderRadius.match(/[\d.]+/)[0]/1.3,options={borderColor:mainTextColor,backgroundColor:"rgba(255, 255, 255, 0.08)",borderWidth:2,pointBackgroundColor:mainTextColor,pointBorderColor:mainTextColor,pointRadius:4,pointHoverRadius:7,fill:!0,tension:.3},data={labels:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],datasets:{humidity:{label:"Humidity",data:[50,45,55,60,50,65,70,75,80,75,70,65],...options},uvIndex:{label:"UV Index",data:[3,4,5,6,7,8,9,8,7,6,5,4],...options},rainfall:{label:"Rainfall",data:[30,40,50,60,70,80,90,100,90,80,70,60],...options},pressure:{label:"Pressure",data:[1010,1012,1015,1013,1011,1010,1009,1008,1007,1006,1008,1010],...options}}},config={type:"line",data:{labels:data.labels,datasets:[data.datasets.humidity]},options:{responsive:!0,maintainAspectRatio:!0,onResize:function(e,t){window.innerWidth<=768&&(config.options.maintainAspectRatio=!1)},aspectRatio:2.5,plugins:{legend:{display:!1},tooltip:{callbacks:{label:function(e){return`${e.dataset.label}: ${e.raw}${"Pressure"===e.dataset.label?" hPa":"%"}`}},displayColors:!1,titleColor:mainBackgroundColor,bodyColor:mainBackgroundColor,backgroundColor:mainTextColor,cornerRadius:secondaryBorderRadius,padding:10,caretPadding:15,caretSize:0,titleMarginBottom:3,titleFont:{size:14},bodyFont:{size:12}},datalabels:{align:"end",anchor:"end",color:mainTextColor,font:{weight:"bold"}}},scales:{x:{ticks:{padding:20,color:secondaryTextColor},grid:{display:!1}},y:{ticks:{callback:function(e,t,a){return e+"%"},padding:30,color:secondaryTextColor},border:{display:!1,dash:[10,10]},grid:{tickColor:"transparent",color:"rgba(255, 255, 255, 0.05)"}}}},plugins:[ChartDataLabels]},weatherChart=new Chart(ctx,config);function createVarFromCss(e){return getComputedStyle(document.documentElement).getPropertyValue(e).trim()}document.querySelectorAll(".chart__tabs-button").forEach((e=>{e.addEventListener("click",(()=>{document.querySelectorAll(".chart__tabs-button").forEach((e=>e.classList.remove("chart__tabs-button--active"))),e.classList.add("chart__tabs-button--active");const t=e.getAttribute("data-type");weatherChart.config.data.datasets=[data.datasets[t]],weatherChart.options.scales.y.ticks.callback=function(e,a,n){return e+("pressure"===t?" hPa":"%")},weatherChart.update()}))})),window.addEventListener("load",(()=>{document.body.classList.remove("js-stop-transition")}));